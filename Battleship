import random

# The following draws up a 10x10 matrix for the game's internal tracking.
def getmatrix():
    global matrix
    matrix = []
    global columns
    columns = []
    for alpha in range(65,75):
        columns.append(chr(alpha))
    for y in range(0,10):
        matrix.append([])
        for x in range(0,10):
            matrix[y].append("%s%i" % (columns[x], y))
# Note that [column][0] == A
# columns.index(cell[0]) == 1 if cell == "B4", etc

def draw():
    print()
    print('  ' + ''.join(' ' + e for e in columns) + ' ')
    for y in range(0,10):
        drawrow = ' ' + str(y) + ' '
        for x in range (0,10):
            if matrix[y][x].isalpha() and len(matrix[y][x]) == 1:
                drawrow = drawrow + matrix[y][x] + ' '
            elif matrix[y][x] == '≈':
                drawrow = drawrow + '≈ '
            else:
                drawrow = drawrow + '? '
        print(drawrow)
    print()
    print("Turn: %i" % turn)

    # First row: ' A B C...' use columns
    # Each subsequent row: '0-9' + currentrow

"""
After the pieces are placed, the matrix's cell values are either default (empty water, unrevealed), or Ship.name
(unrevealed). Both are drawn as '?'.
As the game is played, the matrix's cell values are replaced with either '.' (empty water, revealed), or Ship.symbol
Both are drawn as-is.
"""

class Ship:

    _registry = []

    def __init__(self, name, size, symbol):
        self.name = name
        self.size = size
        self.sunk = False
        self.symbol = symbol
        self.position = []
        self.dmg = []
        self._registry.append(self)

    def findhome(self):
        while len(self.position) < self.size:
            if random.getrandbits(1) == 0:
                i = random.randrange(0, 10)
                j = random.randrange(0, 10 - self.size + 1)
                for y in range(j, j + self.size):
                    if matrix[y][i] == "%s%s" % (columns[i], y):
                        self.position.append("%s%s" % (columns[i], y))
                    else:
                        self.position = []
                        break
            else:
                i = random.randrange(0, 10 - self.size + 1)
                j = random.randrange(0, 10)
                for x in range(i, i + self.size):
                    if matrix[j][x] == "%s%s" % (columns[x], j):
                        self.position.append("%s%s" % (columns[x], j))
                    else:
                        self.position = []
                        break

    """
    Flips a coin to determine if it's going to be laid along the x or y axis. Then selects a point such that if you laid
    the piece horizontally, moving to the right, or vertically, moving down, it would not go out of bounds.
    If a Carrier (size = 5) is going to be laid vertically, x can be 0-9, but y must be 0-5.
    The corresponding matrix cells are checked for default values, and those loci are added to the position list.
    If the cell is not a default value, then another ship must be there, so the position list is emptied and
    the method is repeated.
    """

    def hit(self, xy):
        print("You hit their %s!" % self.name)
        global matrix
        xl = int(columns.index(xy[0]))
        yl = int(xy[1])
        matrix[yl][xl] = self.symbol
        self.dmg.append((xl, yl))
        self.position.remove(xy)
        if self.position == []:
            self.sink()

    def sink(self):
        global matrix
        print("You sunk their %s!" % self.name)
        for flotsam in self.dmg:
            matrix[flotsam[1]][flotsam[0]] = '≈'
        self.sunk = True

    def delete(self):
        self.name = None
        self.size = None
        self.sunk = None
        self.symbol = None
        self.position = None
        self.dmg = None
        self._registry.remove(self)
        # For some reason, not all ships will delete, but the game doesn't have a way of interacting with these
        # ghosts except with debug commands.

def gohome(ship):
    for cell in ship.position:
        # Right now, cell[0] is a letter
        xi = columns.index(cell[0])
        matrix[int(cell[1])][xi] = ship.name

def gamesetup():
    getmatrix()
    carr = Ship('Carrier', 5, 'C')
    carr.findhome()
    gohome(carr)
    batl = Ship('Battleship', 4, 'B')
    batl.findhome()
    gohome(batl)
    cruz = Ship('Cruiser', 3, 'u')
    cruz.findhome()
    gohome(cruz)
    sub = Ship('Submarine', 3, 's')
    sub.findhome()
    gohome(sub)
    dest = Ship('Destroyer', 2, 'd')
    dest.findhome()
    gohome(dest)
    global turn
    turn = 1
    round()

def round():
    global turn
    global matrix
    draw()
    print("Fire upon which coordinate, Admiral?")
    move = input().upper()
    # begin debug commands
    if move == 'SINKALL':
        for ship in Ship._registry:
            ship.sunk = True
        print('Sunk all ships.')
    if move == 'SHOWMATRIX':
        for row in matrix:
            print(row)
    if move == 'POSITION':
        for ship in Ship._registry:
            print(ship.position)
    if move == 'SUNKSTATE':
        for ship in Ship._registry:
            print(ship.sunk)
    if move == 'DMG':
        for ship in Ship._registry:
            print(ship.dmg)
    if move == 'REGISTRY':
        print(Ship._registry)
    if move == 'REGCOUNT':
        print(len(Ship._registry))
    # end debug commands
    if not (move[0] in columns and move[1].isdigit() and len(move) == 2):
        print("Your coordinate must be two characters: one letter (A - J) followed by one numeral.")
        round()
    else:
        xl = int(columns.index(move[0]))
        yl = int(move[1])
        if matrix[yl][xl] == '≈':
            print("We've already determined that the enemy is not there, Admiral.")
            round()
        elif matrix[yl][xl].isalpha() and\
            len(matrix[yl][xl]) == 1:
            print("That section of ship is already destroyed, let's pick somewhere else.")
            round()
        else:
            print("Valid coordinates received, firing for effect.")
            if matrix[yl][xl] == move:
                print('Miss!')
                matrix[yl][xl] = '≈'
            else:
                print('Hit!')
                for ship in Ship._registry:
                    if move in ship.position:
                        ship.hit(move)
    for ship in Ship._registry:
        if not ship.sunk:
            break
    else:
        for ship in Ship._registry:
            ship.delete()
        print("You win!")
        highscore()
        rematch()
    turn += 1
    round()

def rematch():
    tysir = input("Would you like to play again? (y/n)")
    if tysir.lower() == 'y' or tysir.lower() == 'n':
        if tysir.lower() == 'y':
            gamesetup()
        else:
            import sys
            input("Hit enter to exit.")
            sys.exit()
    else:
        print("Invalid input, please try again.")
        rematch()

def highscore():
    import subenc
    hs = input('For posterity, what is your name?')
    if len(hs) > 10:
        print('At most 10 characters, please.')
        highscore()
    else:
        from operator import itemgetter
        scorelist = []
        hs = hs.ljust(10)
        t = str(turn).rjust(3, '0')
        ninja_out = ''
        with open('battleship_scores_enc.txt', 'r') as smoke:
            ninja_in = smoke.read() # Encrypted CSV string
            scorelist = (subenc.txtenc(ninja_in, 'd').split(','))
            del scorelist[-1] # Delete empty string at end. Yes, do it this way.
            scorelist.append(hs + ' ' + t) # Working list of rows
            for line in scorelist:
                ninja_out = ninja_out + line + ','
        with open('battleship_scores_enc.txt', 'w') as smoke:
            smoke.write(subenc.txtenc(ninja_out, 'e'))
        scorelist.sort(key=itemgetter(11, 12, 13))
        print()
        print('Top Ten Scores')
        for score in scorelist[0:9]:
            print(score)
        print()
        # Only player score is being encrypted and appended to original encrypted string
        # Everything is still getting decrypted properly, how lol?

gamesetup()

"""
TO DO:
Leave Ship.symbol as glyph related to Ship.name, easier for player to recognize.
How can I add a sinking animation?
If subenc() returns Type Error, do we re-write default HS list?
"""
